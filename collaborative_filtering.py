# -*- coding: utf-8 -*-
"""collaborative filtering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nZkr42btDeRbtmau6fT0dwrOtjtDIGWt
"""

!pip install surprise

import pandas as pd
from surprise import Dataset, KNNWithMeans, accuracy
from surprise.model_selection import GridSearchCV, train_test_split

# load the built-in MovieLens-100k dataset
movielens = Dataset.load_builtin('ml-100k')

# split movielens dataset into training and test sets
train, test = train_test_split(movielens, test_size=0.2)

pd.DataFrame(movielens.__dict__['raw_ratings'], columns=['user_id','item_id','rating','timestamp']).head()

algo = KNNWithMeans(k=50, sim_options={'name': 'pearson_baseline', 'user_based': True})
algo.fit(train)

# tune KNNWithMeans hyperparameters to find best hyperparameters for the movielens dataset
sim_options = {
    "name": ["msd", "cosine", "pearson_baseline"],
    "min_support": [3, 4, 5],
    "user_based": [False, True],
}

param_grid = {"sim_options": sim_options}

grid = GridSearchCV(KNNWithMeans, param_grid, measures=['rmse','mae'], cv=3)
grid.fit(movielens)

print(grid.best_score["rmse"])
print(grid.best_params["rmse"])

# use the best parameters to train on the training set and explore accuracy of the algorithm on the test set
algo = KNNWithMeans(k=50, sim_options={'name': 'pearson_baseline', 'min_support': 3, 'user_based': False})
algo.fit(train)
pred = algo.test(test)
print("Test set accuracy: ", accuracy.rmse(pred, verbose=True))

# get a prediction for specific users and items
uid = str(22)
iid = str(51)
pred = algo.predict(uid, iid)
print("Estimated rating of user 22 given to item 51: ", pred.est)